version: '3.8'

services:
  # PHPアプリケーションサーバー
  app:
    build:
      context: .
      dockerfile: docker/php/Dockerfile
    container_name: avatar_app
    volumes:
      - .:/var/www
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini
    networks:
      - avatar_network
    depends_on:
      - postgres
      - redis
    environment:
      - DB_HOST=postgres
      - REDIS_HOST=redis

  # Nginxウェブサーバー（ポートを8000に変更）
  nginx:
    image: nginx:alpine
    container_name: avatar_nginx
    ports:
      - "8000:80"      # 80の代わりに8000を使用
      - "4443:443"     # 443の代わりに4443を使用
    volumes:
      - .:/var/www
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - avatar_network
    depends_on:
      - app

  # PostgreSQLデータベース（データ永続化）
  postgres:
    image: postgres:15-alpine
    container_name: avatar_postgres
    environment:
      POSTGRES_DB: avatar_streaming
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      # データベースファイルをローカルに保存
      - ./docker/postgres/data:/var/lib/postgresql/data
      # 初期化スクリプト（オプション）
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - avatar_network

  # Redis（データ永続化）
  redis:
    image: redis:7-alpine
    container_name: avatar_redis
    ports:
      - "6379:6379"
    volumes:
      # Redisデータをローカルに保存
      - ./docker/redis/data:/data
    command: redis-server --appendonly yes  # AOF永続化を有効化
    networks:
      - avatar_network

  # Node.js（フロントエンドビルド用）
  node:
    build:
      context: .
      dockerfile: docker/node/Dockerfile
    container_name: avatar_node
    volumes:
      - .:/var/www
      # node_modulesはコンテナ内で管理
      - node_modules:/var/www/node_modules
    working_dir: /var/www
    networks:
      - avatar_network
    command: tail -f /dev/null
    ports:
      - "5173:5173"

  # Composer（PHP依存関係管理）
  composer:
    image: composer:latest
    container_name: avatar_composer
    volumes:
      - .:/var/www
    working_dir: /var/www
    networks:
      - avatar_network

  # WebSocket Server (Laravel Echo Server / Soketi)
  websocket:
    image: quay.io/soketi/soketi:1.4-16-debian
    container_name: avatar_websocket
    environment:
      DEFAULT_APP_ID: app-id
      DEFAULT_APP_KEY: app-key
      DEFAULT_APP_SECRET: app-secret
      DEFAULT_APP_NAME: avatar-streaming
    ports:
      - "6001:6001"
      - "9601:9601"
    networks:
      - avatar_network

  # MailHog（開発用メールサーバー）
  mailhog:
    image: mailhog/mailhog
    container_name: avatar_mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - avatar_network

  # Adminer（軽量データベース管理ツール）
  adminer:
    image: adminer
    container_name: avatar_adminer
    ports:
      - "8081:8080"  # phpMyAdminの代わりにAdminerを使用
    networks:
      - avatar_network
    depends_on:
      - postgres

networks:
  avatar_network:
    driver: bridge

volumes:
  node_modules:  # node_modulesは名前付きボリュームで管理
